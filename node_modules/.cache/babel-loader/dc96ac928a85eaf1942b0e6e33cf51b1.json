{"ast":null,"code":"var _jsxFileName = \"D:\\\\University\\\\interactive-comments-section-master\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport \"./Components/Styles/App.scss\";\nimport Comment from \"./Components/Comment\";\nimport AddComment from \"./Components/Comment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [comments, updateComments] = useState([]);\n  const [deleteModalState, setDeleteModalState] = useState(false);\n\n  const getData = async () => {\n    const res = await fetch(\"./data/data.json\");\n    const data = await res.json();\n    updateComments(data.comments);\n  };\n\n  useEffect(() => {\n    localStorage.getItem(\"comments\") !== null ? updateComments(JSON.parse(localStorage.getItem(\"comments\"))) : getData();\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"comments\", JSON.stringify(comments));\n    deleteModalState ? document.body.classList.add(\"overflow--hidden\") : document.body.classList.remove(\"overflow--hidden\");\n  }, [comments, deleteModalState]); // update score\n\n  const updateScore = (score, id, type, method) => {\n    let updatedComments = [...comments];\n\n    if (type === \"comment\") {\n      updatedComments.forEach(data => {\n        if (data.id === id) {\n          data.score = score;\n          data.voted = method === \"upvote\" ? true : false;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach(comment => {\n        comment.replies.forEach(data => {\n          if (data.id === id) {\n            data.score = score;\n            data.voted = method === \"upvote\" ? true : false;\n          }\n        });\n      });\n    }\n\n    updateComments(updatedComments);\n  }; // add comments\n\n\n  const addComments = newComment => {\n    const updatedComments = [...comments, newComment];\n    updateComments(updatedComments);\n  }; // add replies\n\n\n  const updateReplies = (replies, id) => {\n    let updatedComments = [...comments];\n    updatedComments.forEach(data => {\n      if (data.id === id) {\n        data.replies = [...replies];\n      }\n    });\n    updateComments(updatedComments);\n  }; // edit comment\n\n\n  const editComment = (content, id, type) => {\n    let updatedComments = [...comments];\n\n    if (type === \"comment\") {\n      updatedComments.forEach(data => {\n        if (data.id === id) {\n          data.content = content;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach(comment => {\n        comment.replies.forEach(data => {\n          if (data.id === id) {\n            data.content = content;\n          }\n        });\n      });\n    }\n\n    updateComments(updatedComments);\n  }; // delete comment\n\n\n  let commentDelete = (id, type, parentComment) => {\n    let updatedComments = [...comments];\n    let updatedReplies = [];\n\n    if (type === \"comment\") {\n      updatedComments = updatedComments.filter(data => data.id !== id);\n    } else if (type === \"reply\") {\n      comments.forEach(comment => {\n        if (comment.id === parentComment) {\n          updatedReplies = comment.replies.filter(data => data.id !== id);\n          comment.replies = updatedReplies;\n        }\n      });\n    }\n\n    updateComments(updatedComments);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"App\",\n    children: [comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n      commentData: comment,\n      updateScore: updateScore,\n      updateReplies: updateReplies,\n      editComment: editComment,\n      commentDelete: commentDelete,\n      setDeleteModalState: setDeleteModalState\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(AddComment, {\n      buttonValue: \"send\",\n      addComments: addComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Ye1rPW7xRkrmEDK02fTzOLS0H3o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/University/interactive-comments-section-master/src/App.js"],"names":["useState","useEffect","Comment","AddComment","App","comments","updateComments","deleteModalState","setDeleteModalState","getData","res","fetch","data","json","localStorage","getItem","JSON","parse","setItem","stringify","document","body","classList","add","remove","updateScore","score","id","type","method","updatedComments","forEach","voted","comment","replies","addComments","newComment","updateReplies","editComment","content","commentDelete","parentComment","updatedReplies","filter","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport \"./Components/Styles/App.scss\";\n\nimport Comment from \"./Components/Comment\";\nimport AddComment from \"./Components/Comment\";\n\n\nconst App = () => {\n  const [comments, updateComments] = useState([]);\n  const [deleteModalState, setDeleteModalState] = useState(false);\n\n  const getData = async () => {\n    const res = await fetch(\"./data/data.json\");\n    const data = await res.json();\n    updateComments(data.comments);\n  };\n\n  useEffect(() => {\n    localStorage.getItem(\"comments\") !== null\n      ? updateComments(JSON.parse(localStorage.getItem(\"comments\")))\n      : getData();\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"comments\", JSON.stringify(comments));\n    deleteModalState\n      ? document.body.classList.add(\"overflow--hidden\")\n      : document.body.classList.remove(\"overflow--hidden\");\n  }, [comments, deleteModalState]);\n\n  // update score\n  const updateScore = (score, id, type, method) => {\n    let updatedComments = [...comments];\n\n    if (type === \"comment\") {\n      updatedComments.forEach((data) => {\n        if (data.id === id) {\n          data.score = score;\n          data.voted = method === \"upvote\" ? true : false;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach((comment) => {\n        comment.replies.forEach((data) => {\n          if (data.id === id) {\n            data.score = score;\n            data.voted = method === \"upvote\" ? true : false;\n          }\n        });\n      });\n    }\n    updateComments(updatedComments);\n  };\n\n  // add comments\n  const addComments = (newComment) => {\n    const updatedComments = [...comments, newComment];\n    updateComments(updatedComments);\n  };\n\n  // add replies\n  const updateReplies = (replies, id) => {\n    let updatedComments = [...comments];\n    updatedComments.forEach((data) => {\n      if (data.id === id) {\n        data.replies = [...replies];\n      }\n    });\n    updateComments(updatedComments);\n  };\n\n  // edit comment\n  const editComment = (content, id, type) => {\n    let updatedComments = [...comments];\n\n    if (type === \"comment\") {\n      updatedComments.forEach((data) => {\n        if (data.id === id) {\n          data.content = content;\n        }\n      });\n    } else if (type === \"reply\") {\n      updatedComments.forEach((comment) => {\n        comment.replies.forEach((data) => {\n          if (data.id === id) {\n            data.content = content;\n          }\n        });\n      });\n    }\n\n    updateComments(updatedComments);\n  };\n\n  // delete comment\n  let commentDelete = (id, type, parentComment) => {\n    let updatedComments = [...comments];\n    let updatedReplies = [];\n\n    if (type === \"comment\") {\n      updatedComments = updatedComments.filter((data) => data.id !== id);\n    } else if (type === \"reply\") {\n      comments.forEach((comment) => {\n        if (comment.id === parentComment) {\n          updatedReplies = comment.replies.filter((data) => data.id !== id);\n          comment.replies = updatedReplies;\n        }\n      });\n    }\n\n    updateComments(updatedComments);\n  };\n\n  return (\n    <main className=\"App\">\n      {comments.map((comment) => (\n        <Comment\n          key={comment.id}\n          commentData={comment}\n          updateScore={updateScore}\n          updateReplies={updateReplies}\n          editComment={editComment}\n          commentDelete={commentDelete}\n          setDeleteModalState={setDeleteModalState}\n        />\n      ))}\n      <AddComment buttonValue={\"send\"} addComments={addComments} />\n    </main>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}